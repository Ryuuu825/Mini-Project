{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "fflang",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
		  "include": "#double_quoted_strings"
		},
		{
		  "include": "#single_quoted_strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#data_type"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ff",
				"match": "\\b(if|while|for|return|create|mut)\\b"
			}]
		},
		"double_quoted_strings": {
		  "name": "string.quoted.double.carbonscript",
		  "begin": "\"",
		  "end": "\"",
		  "patterns": [
			{
			  "name": "constant.character.escape.carbonscript",
			  "match": "\\\\."
			}
		  ]
		},
		"single_quoted_strings": {
		  "name": "string.quoted.single",
		  "begin": "\\'",
		  "end": "\\'",
		  "patterns": [
			{
			  "name": "constant.character.escape.carbonscript",
			  "match": "\\\\."
			}
		  ]
		},
		"comments": {
			"patterns": [{
				"name": "comment.block.ff",
				"begin": "/\\*",
				"end": "\\*/"
			}, {
				"name": "comment.line.double-slash.ff",
				"begin": "//",
				"end": "$"
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.ff",
				"match": "\\b(0x[0-9a-fA-F]+|[0-9]+(\\.[0-9]+)?)\\b"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.arithmetic.ff",
				"match": "\\+|\\-|\\*|\\/"
			}, {
				"name": "keyword.operator.comparison.ff",
				"match": "\\=\\=|\\!\\="
			}, {
				"name": "keyword.operator.logical.ff",
				"match": "\\&\\&|\\|\\|"
			}, {
				"name": "keyword.operator.bitwise.ff",
				"match": "\\&|\\|\\|\\^|\\~"
			}, {
				"name": "keyword.operator.increment.ff",
				"match": "\\+\\+|\\-\\-"
			}]
		},
		"variables": {
			"begin": "(var|ref|arr|glovar|let)",
      		"end": "\\:",
			"patterns": [{
				"name": "support.variable",
				"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
			}]
		},
		"functions": {
			"patterns": [{
				"name": "entity.name.function.ff",
				"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.ff",
				"match": "\\b(true|false|nil)\\b"
			}]
		},
		"data_type": {
			"patterns": [
			  {
				"name": "entity.name.type",
				"match": "\\b(bool|int|double|long|char|str)\\b"
			  }
			]
		}
	},
	"scopeName": "source.ff"
}